package com.equisym.web;

import java.io.UnsupportedEncodingException;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import javax.mail.MessagingException;
import javax.servlet.http.HttpServletRequest;

import org.springframework.data.repository.query.Param;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.equisym.model.Slots;
import com.equisym.model.Students;
import com.equisym.model.Users;
import com.equisym.model.Repository.SlotRepository;
import com.equisym.model.Repository.UserRepository;
import com.equisym.model.Repository.StudentRepository;
import com.equisym.service.UserService;
import com.equisym.service.Utility;
import com.equisym.service.slot.SlotService;
import com.equisym.service.student.StudentService;
import com.equisym.web.dto.SlotCreationDto;
import com.equisym.web.dto.StudentsDto;
import com.equisym.web.dto.UserRegistrationDto;

@Controller
//@RequestMapping
public class SlotHomeController 
{
	private SlotService slotService;
	private StudentService studentService;
	private SlotRepository slotRepository;
	private UserRepository userRepository;
	private StudentRepository studentRepository;
	private Users user;
	private String SlotCourse;
	private LocalDate SlotDate;
	private String timeIn;
	private String timeOut;
	private String email;
	private String address1;
	private String address2;
	private Long slot_id;
	private String landmark;
	private String zipCode;
	private String defaultAddress1 = "";
	private String defaultAddress2 = "";
	private String defaultLandmark = "";
	private String defaultZipCode = "";
	private double defaultLongitude = 22.49682;
	private double defaultLatitude = 78.80045;
	private List<String> scourse;
	private List<LocalDate> sSlotDate;
	private List<Slots> sSlotTime;
	//private String emailId = SecurityContextHolder.getContext().getAuthentication().getName();

	public SlotHomeController(SlotService slotService, StudentService studentService ,SlotRepository slotRepository,UserRepository userRepository ,StudentRepository studentRepository) 
	{
		super();
		this.slotService = slotService;
		this.studentService = studentService;
		this.slotRepository = slotRepository;
		this.studentRepository = studentRepository;
		this.userRepository = userRepository;
	}

	@GetMapping("/slot_home")
	public String SlotHome(Model model)
	{
		
		this.email = SecurityContextHolder.getContext().getAuthentication().getName();
		this.user = userRepository.findByEmail(email);
		
		if((email.equalsIgnoreCase("anonymousUser")) || (user.getRoleName().equalsIgnoreCase("Trainer")))
		{
			
			return "redirect:/login";
		}
		
		if(user.getRoleName().equalsIgnoreCase("Trainer & Trainee"))
		{
			List<String> trainerCourses = slotRepository.getCourses(email);
			List<String> allCourses = slotRepository.getCourses();
			System.out.println("Trainer & Tranee list is empty");
			for(int i=0;i<trainerCourses.size();i++)
			{
				System.out.print(trainerCourses.get(i)+ " ");
			}
			System.out.println();
			for(int i=0;i<allCourses.size();i++)
			{
				System.out.print(allCourses.get(i)+ " ");
			}
			
			scourse= slotService.getDifferentCourses(trainerCourses,allCourses);
			for(int i=0;i<scourse.size();i++)
			{
				System.out.print(scourse.get(i)+ " ");
			}
			System.out.println();
			model.addAttribute("scourse",scourse);
			return "slot_home";
		}
		scourse= slotRepository.getCourses();
		model.addAttribute("scourse",scourse);
		return "slot_home"; 
	}
	@PostMapping("/slot_home")
	public String home(Model model,HttpServletRequest request, StudentsDto studentDto)
	{
		String course = request.getParameter("slotcourse");
		String date = request.getParameter("slotdate");
		String add1 = request.getParameter("address1");
		String add2 = request.getParameter("address2");
		String land = request.getParameter("landmark");
		String zip = request.getParameter("zipCode");
		
		String id = request.getParameter("slottime");
		return slotBooking(model,course,date,id,add1,add2,land,zip,studentDto);
	}

	private String slotBooking(Model model, String course, String date, String id, String add1, String add2, String land,
			String zip, StudentsDto studentDto) 
	{
		if(!course.isEmpty() && date.isEmpty() && id.isEmpty() && add1.isEmpty() && add2.isEmpty() && land.isEmpty() && zip.isEmpty())
		{
			this.SlotCourse = course;
			sSlotDate = slotRepository.getSlotDate(SlotCourse);
			model.addAttribute("scourse",scourse);
			model.addAttribute("sSlotDate", sSlotDate);
			System.out.println("First if condition");
		}
		else if(!course.isEmpty() && !date.isEmpty() && id.isEmpty() && add1.isEmpty() && add2.isEmpty() && land.isEmpty() && zip.isEmpty())
		{
				System.out.println("Second else  if condition");
				this.SlotDate = LocalDate.parse(date);
				sSlotTime = slotRepository.getSlotTime(course,LocalDate.parse(date));
				model.addAttribute("scourse",scourse);
				model.addAttribute("sSlotDate", sSlotDate);
				model.addAttribute("sSlotTime", sSlotTime);

			
		}
		else if (!course.isEmpty() && !date.isEmpty() && !id.isEmpty() && add1.isEmpty() && add2.isEmpty() && land.isEmpty() && zip.isEmpty())
		{
				System.out.println("Third else  if condition");
			
				model.addAttribute("scourse",scourse);
				model.addAttribute("sSlotDate", sSlotDate);
				model.addAttribute("sSlotTime", sSlotTime);
				this.slot_id = Long.parseLong(id);
				this.timeIn = slotRepository.getTimeInById(slot_id);
				this.timeOut = slotRepository.getTimeOutById(slot_id);
				System.out.println("Time In : "+timeIn);
				System.out.println("Time Out : "+timeOut);
				Students student = studentRepository.getSlots(email,LocalDate.parse(date),timeIn,timeOut);
				
				if (student!=null)
					return "redirect:/slot_home?Fail";
				else
				{
					List<Slots> avail_slots = slotRepository.getAvailableSlots(course,LocalDate.parse(date),timeIn,timeOut);
					if(avail_slots!=null)
					{
						defaultAddress1 = slotService.getAddress1(avail_slots.get(0));
						defaultAddress2 = slotService.getAddress2(avail_slots.get(0));
						defaultLandmark = slotService.getLandmark(avail_slots.get(0));
						defaultZipCode = slotService.getZipCode(avail_slots.get(0));
						defaultLatitude = slotService.getLatitude(avail_slots.get(0));
						defaultLongitude = slotService.getLongitude(avail_slots.get(0));
					}
					model.addAttribute("add1",defaultAddress1);
					model.addAttribute("add2",defaultAddress2);
					model.addAttribute("land",defaultLandmark);
					model.addAttribute("zip",defaultZipCode);
					model.addAttribute("lati",defaultLatitude);
					model.addAttribute("longi",defaultLongitude);
				}
			
		}
		else if(!course.isEmpty() && !date.isEmpty() && !(String.valueOf(id)).isEmpty() && !add1.isEmpty() && !add2.isEmpty() && !land.isEmpty() && !zip.isEmpty())		
		{
			
				this.address1 = add1;
				this.address2 = add2;
				this.landmark = land;
				this.zipCode = zip;
				System.out.println("Course : "+SlotCourse);
				System.out.println("Slot date : "+SlotDate.toString());
				System.out.println("Start time : "+timeIn);
				System.out.println("End time : "+timeOut);
				System.out.println("Address Line 1 : "+add1);
				System.out.println("Address Line 2 : "+add2);
				System.out.println("Landmark : "+land);
				System.out.println("ZIP Code : "+zip);
				Long slotid = slotRepository.getId(course,LocalDate.parse(date),timeIn,timeOut,address1,address2,landmark,zipCode);
				System.out.println("Slot Id : "+slotid);
				Slots slotInfo= slotService.decreaseCapacity(slotid);
				studentDto.slotDetails(slotInfo);
				studentService.save(studentDto);
				studentService.sendEmail(email,SlotDate,timeIn,timeOut);
				
				return "redirect:/slot_home?Success";
			
		}
		return "slot_home";
	}
		

}