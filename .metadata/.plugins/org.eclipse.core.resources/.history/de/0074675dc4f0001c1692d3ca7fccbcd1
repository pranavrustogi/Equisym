package com.equisym.web;

import java.io.UnsupportedEncodingException;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import javax.mail.MessagingException;
import javax.servlet.http.HttpServletRequest;

import org.springframework.data.repository.query.Param;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.equisym.model.Slots;
import com.equisym.model.Students;
import com.equisym.model.Users;
import com.equisym.model.Repository.SlotRepository;
import com.equisym.model.Repository.StudentRepository;
import com.equisym.service.UserService;
import com.equisym.service.Utility;
import com.equisym.service.slot.SlotService;
import com.equisym.service.student.StudentService;
import com.equisym.web.dto.SlotCreationDto;
import com.equisym.web.dto.StudentsDto;
import com.equisym.web.dto.UserRegistrationDto;

@Controller
//@RequestMapping
public class SlotHomeController 
{
	private SlotService slotService;
	private StudentService studentService;
	private SlotRepository slotRepository;
	private StudentRepository studentRepository;
	private List<Slots> slotList;
	private String SlotCourse;
	private LocalDate SlotDate;
	private String timeIn;
	private String timeOut;
	private String email;
	//private String emailId = SecurityContextHolder.getContext().getAuthentication().getName();

	public SlotHomeController(SlotService slotService, StudentService studentService ,SlotRepository slotRepository, StudentRepository studentRepository) 
	{
		super();
		this.slotService = slotService;
		this.studentService = studentService;
		this.slotRepository = slotRepository;
		this.studentRepository = studentRepository;
	}

	
	
	@GetMapping("/slot_home")
	public String SlotHome(Model model)
	{
		
		List<String> scourse= slotRepository.getCourses();
		
		model.addAttribute("scourse",scourse);
		
		
		return "slot_home"; 
	}
	/*
	@PostMapping("/slot_home/course")
	public String SlotHome(Model model, HttpServletRequest request)
	{
		this.SlotCourse = request.getParameter("slotCourse");
		System.out.println("Course Name : "+SlotCourse);
		List<LocalDate> sSlotDate = slotRepository.getSlotDate(SlotCourse);
		
		model.addAttribute("sSlotDate", sSlotDate);
		
		
		return "slot_home";
	}
	@GetMapping("/slot_home/course")
	public String slotAvail(Model model, HttpServletRequest request)
	{
		
		this.SlotDate = LocalDate.parse(request.getParameter("slotdate"));
		System.out.println("I am slotAvail");
		System.out.println("Course Selected : "+SlotCourse);
		System.out.println("Slot Date selected : "+SlotDate);
		//return "slot_home";
		return slotBook3(model,request);
	}
	
	//@PostMapping("/slot_home/time")
		public String slotBook3(Model model, HttpServletRequest request)
		{
			
			
			List<Slots> SlotTime = slotRepository.getSlotTime(SlotCourse,SlotDate);
			model.addAttribute("sSlotTime", SlotTime);
			return "slot_home";
			
		}
		@RequestMapping("/slot_home/time")
		public String slotBooking(HttpServletRequest request)
		{
			System.out.println("I am slotBooking");
			long slot_id = Long.parseLong(request.getParameter("slottime"));
			this.timeIn = slotRepository.getTimeInById(slot_id);
			this.timeOut = slotRepository.getTimeOutById(slot_id);
			System.out.println("Slot Start Time : "+timeIn);
			System.out.println("Slot End Time : "+timeOut);
			return "redirect:/availableSlots";
		}
		@GetMapping("/availableSlots")
		public String available(Model model)
		{
			this.email = SecurityContextHolder.getContext().getAuthentication().getName();
			List<Students> booked = studentRepository.getSlots(email,SlotDate,timeIn,timeOut);
			
			if (booked.size()>0)
				return "book_error";
			
			
			List<Slots> avail_slots = slotRepository.getAvailableSlots(SlotCourse,SlotDate,timeIn,timeOut);
			model.addAttribute("availableSlots",avail_slots);
			return "available_slots";
		}
	
	*/
	@PostMapping("/slot_home/course")
	public String SlotBook2(Model model, HttpServletRequest request)
	{
		
		this.SlotCourse = request.getParameter("slotd");
		List<LocalDate> sSlotDate = slotRepository.getSlotDate("SlotCourse");
		model.addAttribute("sSlotDate", sSlotDate);
		return "slot_home";
	}
	@GetMapping("/slot_home/course")
	public String slotAvail(Model model, HttpServletRequest request)
	{
		
		this.SlotDate = LocalDate.parse(request.getParameter("slotdate"));
		System.out.println("I am slotAvail");
		System.out.println("Course Selected : "+SlotCourse);
		System.out.println("Slot Date selected : "+SlotDate);
		return slotBook3(model,request);
	}
	//@PostMapping("/slot_home/time")
	public String slotBook3(Model model, HttpServletRequest request)
	{
		List<String> scourse= slotRepository.getCourses();
		System.out.println("I am slotBook3");
		System.out.println("Pringting Courses :");
		for(int i=0;i<scourse.size();i++)
		{
			System.out.println(scourse.get(i));
		}
		model.addAttribute("scourse",scourse);
		String course = request.getParameter("slotd");
		//this.SlotCourse = request.getParameter("slotd");
		List<LocalDate> sSlotDate = slotRepository.getSlotDate(course);
		System.out.println("Pringting Date :");
		for(int i=0;i<sSlotDate.size();i++)
		{
			System.out.println(sSlotDate.get(i));
		}
		model.addAttribute("sSlotDate", sSlotDate);
		
		
		List<Slots> SlotTime = slotRepository.getSlotTime(SlotCourse,SlotDate);
		model.addAttribute("sSlotTime", SlotTime);
		return "slot_home";
		
	}
	@RequestMapping("/slot_home/time")
	public String slotBooking(HttpServletRequest request)
	{
		System.out.println("I am slotBooking");
		long slot_id = Long.parseLong(request.getParameter("slottime"));
		this.timeIn = slotRepository.getTimeInById(slot_id);
		this.timeOut = slotRepository.getTimeOutById(slot_id);
		System.out.println("Slot Start Time : "+timeIn);
		System.out.println("Slot End Time : "+timeOut);
		return "redirect:/availableSlots";
	}
	
	@GetMapping("/availableSlots")
	public String available(Model model)
	{
		this.email = SecurityContextHolder.getContext().getAuthentication().getName();
		List<Students> booked = studentRepository.getSlots(email,SlotDate,timeIn,timeOut);
		
		if (booked.size()>0)
			return "book_error";
		
		
		List<Slots> avail_slots = slotRepository.getAvailableSlots(SlotCourse,SlotDate,timeIn,timeOut);
		model.addAttribute("availableSlots",avail_slots);
		return "available_slots";
	}
	@GetMapping("/availableSlots/book/{id}")
	public String booking(@PathVariable("id") String id, StudentsDto studentDto)
	{
		Slots slotInfo= slotService.decreaseCapacity(Long.parseLong(id));
		studentDto.slotDetails(slotInfo);
		studentService.save(studentDto);
		studentService.sendEmail(email);
		return "book_success";
	}
	
		
}
